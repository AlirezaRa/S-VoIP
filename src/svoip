#!/usr/bin/env python

"""
 Copyright 2016 Alireza Rafiei

 Licensed under the Apache License, Version 2.0 (the "License"); you may
 not use this file except in compliance with the License. You may obtain
 a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""


import argparse
import subprocess


def argument_handler():
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--messenger", help="What's your messenger?",
                        type=str, required=True)
    parser.add_argument("-s", "--words_per_minute",
                        help="Specify output speed in terms of word per minute",
                        type=int, default=75)
    args = parser.parse_args()
    # Checks the output of `which` to see if the input of messenger is valid
    try:
        subprocess.check_output("which {}".format(args.messenger), shell=True)
    except subprocess.CalledProcessError:
        print "{} is not in your path".format(args.messenger)
        raise SystemExit
    return args.messenger, args.words_per_minute


def load_pactl_module_null_sink(pactl_module_name="SVOIP"):
    """
    Loads the module-null-sink named `pactl_module_name`

    Parameters
    ----------
    pactl_module_name   str

    Returns
    -------
    proc_id             int
                        The id number of the loaded null-sink module. It'll be
                        used later to unload the module after exiting the
                        program.
    """
    proc_id = subprocess.check_output(
        "pactl load-module module-null-sink sink_name={}".format(
            pactl_module_name),
        shell=True)
    proc_id = int(proc_id.rstrip('\n'))
    print (
        "Loaded module-null-sync with index {} named '{}' successfuly.".format(
            proc_id, pactl_module_name))
    return proc_id


def unload_pactl_module_null_sink(proc_id):
    """
    Unloads pactl null-sink module.

    Parameters
    ----------
    proc_id             int
    """
    subprocess.Popen("pactl unload-module {}".format(proc_id),
                     shell=True).communicate()


def run_messenger(messenger, pactl_module_name="SVOIP"):
    """
    Runs the messenger in the background while changing its input to the loaded
    module

    Parameters
    ----------
    messenger           str
    pactl_module_name   str

    Returns
    -------
    messenger_pid       int
    """
    messenger_pid = subprocess.Popen(
        "PULSE_SOURCE={}.monitor {} 2>/dev/null >/dev/null &".format(
            pactl_module_name, messenger),
        shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print "Skype is running with pid={}".format(messanger_pid)
    return messenger_pid


def run_espeak(words_per_minute, pactl_module_name="SVOIP"):
    """
    The main loop during which user types sentences and pass it through
    espeak. If one presses Ctrl+c (or Ctrl+d) the loop breaks.

    Parameters
    ----------
    words_per_minute    int
                        espeak's speed in terms of words_per_minute
    pactl_module_name   str
    """
    while True:
        try:
            text = str(raw_input(
                "Type something for synthesization, or Ctrl+c to quit: "))
            subprocess.Popen("PULSE_SINK={} espeak -s {} {}".format(
                pactl_module_name, words_per_minute, text),
                shell=True).communicate()
        except (KeyboardInterrupt, EOFError):
            break

if __name__ == "__main__":
    messenger, words_per_minute = argument_handler()
    pactl_module_id = load_pactl_module_null_sink()
    messanger_pid = run_messenger(messenger)
    run_espeak(words_per_minute)
    unload_pactl_module_null_sink(pactl_module_id)
